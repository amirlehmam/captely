events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    
    # WebSocket upgrade map
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    # Upstream definitions - FIXED TO USE INTERNAL CONTAINER PORTS
    upstream frontend {
        server frontend:80;
    }
    
    upstream auth_service {
        server auth-service:8000;  # Fixed: container internal port, not host port
    }
    
    upstream import_service {
        server import-service:8000;  # Fixed: container internal port
    }
    
    upstream credit_service {
        server credit-service:8000;  # Fixed: container internal port
    }
    
    upstream export_service {
        server export-service:8000;  # Fixed: container internal port
    }
    
    upstream analytics_service {
        server analytics-service:8000;  # Fixed: container internal port
    }
    
    upstream notification_service {
        server notification-service:8000;  # Fixed: container internal port
    }
    
    upstream billing_service {
        server billing-service:8000;  # Fixed: container internal port
    }
    
    upstream crm_service {
        server crm-service:8000;  # Fixed: container internal port
    }
    
    upstream flower_service {
        server flower:5555;
    }
    
    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }
    
    # Main HTTPS server with certbot certificates
    server {
        listen 443 ssl;
        server_name captely.com;
        
        # SSL configuration with certbot/Let's Encrypt certificates
        ssl_certificate /etc/letsencrypt/live/captely.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/captely.com/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Frontend (Static Files)
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # WebSocket support (in case any WebSocket connections are needed)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 86400;
        }
        
        # FIXED AUTH SERVICE ROUTING - This handles both correct and doubled paths
        location /api/auth/ {
            limit_req zone=api burst=20 nodelay;
            # Smart rewrite: removes doubled auth if present, handles normal case too
            rewrite ^/api/auth/(?:auth/)?(.*)$ /auth/$1 break;
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }
        
        # Direct auth routes fallback (for direct /auth/ calls from frontend)
        location /auth/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }

        
        # FIXED CREDIT SERVICE ROUTING - Smart rewrite to handle doubled paths
        location /api/credit/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/credit/(?:credit/)?(.*)$ /api/$1 break;
            proxy_pass http://credit_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # FIXED IMPORT SERVICE ROUTING - Smart rewrite to handle doubled paths
        location /api/import/ {
            limit_req zone=upload burst=5 nodelay;
            rewrite ^/api/import/(?:api/)?(.*)$ /api/$1 break;
            proxy_pass http://import_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }
        
        # FIXED EXPORT SERVICE ROUTING - Smart rewrite to handle doubled paths
        location /api/export/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/export/(?:export/)?(.*)$ /api/$1 break;
            proxy_pass http://export_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
        }
        
        # FIXED ANALYTICS SERVICE ROUTING - Smart rewrite to handle doubled paths
        location /api/analytics/ {
            limit_req zone=api burst=15 nodelay;
            rewrite ^/api/analytics/(?:api/analytics/)?(.*)$ /api/$1 break;
            proxy_pass http://analytics_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # FIXED NOTIFICATION SERVICE ROUTING - Smart rewrite to handle doubled paths
        location /api/notification/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/notification/(?:notification/)?(.*)$ /api/$1 break;
            proxy_pass http://notification_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # FIXED BILLING SERVICE ROUTING - Smart rewrite to handle doubled paths
        location /api/billing/ {
            limit_req zone=api burst=10 nodelay;
            rewrite ^/api/billing/(?:billing/)?(.*)$ /api/$1 break;
            proxy_pass http://billing_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # STRIPE WEBHOOKS - Special handling without rate limiting for webhook reliability
        location /api/webhooks/stripe {
            # No rate limiting for webhooks to ensure reliability
            proxy_pass http://billing_service/api/webhooks/stripe;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Stripe-Signature $http_stripe_signature;
            
            # Increase timeouts for webhook processing
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
            
            # Preserve original request body for webhook signature verification
            proxy_request_buffering off;
        }
        
        # FIXED CRM SERVICE ROUTING - Smart rewrite to handle doubled paths
        location /api/crm/ {
            limit_req zone=api burst=20 nodelay;
            rewrite ^/api/crm/(?:crm/)?(.*)$ /api/$1 break;
            proxy_pass http://crm_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Flower monitoring (protected)
        location /flower/ {
            auth_basic "Flower Monitoring";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass http://flower_service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
} 